{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOHhW63DjB2haVPvMHxpYik"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"a9PG00TD7tif"},"outputs":[],"source":["#Carregandos bibliotecas importantes para a atividade\n","import pandas as pd\n","import numpy as np\n","\n","import matplotlib.pyplot as plt\n","import matplotlib\n","import seaborn as sns\n","%matplotlib inline\n","#plt.figure(figsize=(largura, altura))\n","plt.rcParams[\"figure.figsize\"] = (12, 8)\n","\n","import plotly.express as px\n","\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","pd.set_option('display.float_format', lambda x: '%.3f' % x)\n","\n","import io, os\n","\n","import missingno as miss\n","\n","from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n","from sklearn.model_selection import train_test_split\n","from sklearn import preprocessing\n","from sklearn.feature_selection import mutual_info_classif\n","from sklearn.feature_selection import SelectKBest\n","\n","from pprint import pprint\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.ensemble import AdaBoostClassifier\n","\n","from sklearn.model_selection import RandomizedSearchCV\n","from sklearn.model_selection import GridSearchCV, StratifiedKFold\n","from sklearn.model_selection import train_test_split, cross_val_predict, KFold,cross_val_score\n","\n","from sklearn.metrics import confusion_matrix,accuracy_score,precision_score,recall_score,ConfusionMatrixDisplay, f1_score\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import roc_curve, roc_auc_score\n","\n","# from imblearn.over_sampling import SMOTE\n","# from imblearn.over_sampling import RandomOverSampler\n","# from imblearn.pipeline import Pipeline\n","\n","from google.colab import drive"]},{"cell_type":"code","source":["#Montando o drive para carregar o arquivo\n","GOOGLE_COLAB = \"google.colab\" in str(get_ipython())\n","\n","if GOOGLE_COLAB:\n","    from google.colab import drive\n","    drive.mount(\"/content/drive\", force_remount=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k7GLl1jL7xcY","executionInfo":{"status":"ok","timestamp":1742840267454,"user_tz":180,"elapsed":4953,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"fab62160-8745-405e-95d6-006e2c5b7825"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["drive = '/content/drive/MyDrive/Mestrado/ids_datasets/BotNeTIoT-L01/'\n"],"metadata":{"id":"dkhIaTP88Hgv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["csvs = os.listdir(drive)\n","csvs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8jGQ1FjK8TP7","executionInfo":{"status":"ok","timestamp":1742840267507,"user_tz":180,"elapsed":24,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"5ff629d9-4263-42a0-bb1f-6030ec5a93f1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['BotNeTIoT-L01', 'BotNeTIoT-L01_label_NoDuplicates.csv', 'dataset_hdc']"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["# Assuming 'drive' is the directory path\n","file_path = os.path.join(drive, 'BotNeTIoT-L01_label_NoDuplicates.csv')"],"metadata":{"id":"oeVOlITv8UN7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv(file_path, na_values=['inf', '-inf'])"],"metadata":{"id":"xzuud0_s8eAt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b0w5dGHC-iTD","executionInfo":{"status":"ok","timestamp":1742840309164,"user_tz":180,"elapsed":10,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"44cd8b00-0095-4613-d729-9072597caaaf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 2426574 entries, 0 to 2426573\n","Data columns (total 25 columns):\n"," #   Column                Dtype  \n","---  ------                -----  \n"," 0   Unnamed: 0            int64  \n"," 1   MI_dir_L0.1_weight    float64\n"," 2   MI_dir_L0.1_mean      float64\n"," 3   MI_dir_L0.1_variance  float64\n"," 4   H_L0.1_weight         float64\n"," 5   H_L0.1_mean           float64\n"," 6   H_L0.1_variance       float64\n"," 7   HH_L0.1_weight        float64\n"," 8   HH_L0.1_mean          float64\n"," 9   HH_L0.1_std           float64\n"," 10  HH_L0.1_magnitude     float64\n"," 11  HH_L0.1_radius        float64\n"," 12  HH_L0.1_covariance    float64\n"," 13  HH_L0.1_pcc           float64\n"," 14  HH_jit_L0.1_weight    float64\n"," 15  HH_jit_L0.1_mean      float64\n"," 16  HH_jit_L0.1_variance  float64\n"," 17  HpHp_L0.1_weight      float64\n"," 18  HpHp_L0.1_mean        float64\n"," 19  HpHp_L0.1_std         float64\n"," 20  HpHp_L0.1_magnitude   float64\n"," 21  HpHp_L0.1_radius      float64\n"," 22  HpHp_L0.1_covariance  float64\n"," 23  HpHp_L0.1_pcc         float64\n"," 24  label                 int64  \n","dtypes: float64(23), int64(2)\n","memory usage: 462.8 MB\n"]}]},{"cell_type":"code","source":["df.describe().T"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":833},"id":"hm8zvCgH8xOR","executionInfo":{"status":"ok","timestamp":1742826556525,"user_tz":180,"elapsed":2054,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"5cf5b6bc-9903-4f6d-f8b5-a91ff981af87"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                           count                 mean                   std  \\\n","Unnamed: 0           2426574.000          2697342.466           2438426.006   \n","MI_dir_L0.1_weight   2426574.000             3610.199              2699.672   \n","MI_dir_L0.1_mean     2426574.000              217.614               155.209   \n","MI_dir_L0.1_variance 2426574.000            26445.640             28263.440   \n","H_L0.1_weight        2426574.000             3610.199              2699.672   \n","H_L0.1_mean          2426574.000              217.614               155.209   \n","H_L0.1_variance      2426574.000            26445.689             28263.404   \n","HH_L0.1_weight       2426574.000             1676.056              2195.495   \n","HH_L0.1_mean         2426574.000              217.056               221.819   \n","HH_L0.1_std          2426574.000                9.480                35.224   \n","HH_L0.1_magnitude    2426574.000              230.287               222.276   \n","HH_L0.1_radius       2426574.000             3894.844             27784.932   \n","HH_L0.1_covariance   2426574.000             -246.249              3394.036   \n","HH_L0.1_pcc          2426574.000                0.006                 0.095   \n","HH_jit_L0.1_weight   2426574.000             1676.056              2195.495   \n","HH_jit_L0.1_mean     2426574.000        555423021.895         724253684.091   \n","HH_jit_L0.1_variance 2426574.000 4170853015257080.000 44450991890045104.000   \n","HpHp_L0.1_weight     2426574.000              162.746               691.490   \n","HpHp_L0.1_mean       2426574.000              217.025               222.323   \n","HpHp_L0.1_std        2426574.000                5.033                32.153   \n","HpHp_L0.1_magnitude  2426574.000              227.634               223.781   \n","HpHp_L0.1_radius     2426574.000             2282.595             22796.590   \n","HpHp_L0.1_covariance 2426574.000              229.104              3097.686   \n","HpHp_L0.1_pcc        2426574.000                0.004                 0.078   \n","label                2426574.000                0.212                 0.408   \n","\n","                             min        25%         50%            75%  \\\n","Unnamed: 0                 0.000 670135.250 1579600.500    3744351.750   \n","MI_dir_L0.1_weight         1.000     23.533    3865.927       6339.465   \n","MI_dir_L0.1_mean          60.000     69.400     134.912        382.155   \n","MI_dir_L0.1_variance       0.000     42.937   11168.076      55204.528   \n","H_L0.1_weight              1.000     23.533    3865.927       6339.465   \n","H_L0.1_mean               60.000     69.400     134.912        382.155   \n","H_L0.1_variance            0.000     42.939   11169.045      55204.528   \n","HH_L0.1_weight             1.000      1.000       3.503       4128.297   \n","HH_L0.1_mean              60.000     60.000      73.998        553.833   \n","HH_L0.1_std                0.000      0.000       0.168          6.785   \n","HH_L0.1_magnitude         60.000     60.000      95.263        553.839   \n","HH_L0.1_radius             0.000      0.000       0.029         52.172   \n","HH_L0.1_covariance   -259668.192      0.000       0.000          0.000   \n","HH_L0.1_pcc               -1.586      0.000       0.000          0.000   \n","HH_jit_L0.1_weight         1.000      1.000       3.503       4128.297   \n","HH_jit_L0.1_mean           0.002      2.574     818.690 1507653375.226   \n","HH_jit_L0.1_variance       0.000      0.000      16.044 2382293328.119   \n","HpHp_L0.1_weight           1.000      1.000       1.000          1.049   \n","HpHp_L0.1_mean            60.000     60.000      74.000        554.000   \n","HpHp_L0.1_std              0.000      0.000       0.000          0.000   \n","HpHp_L0.1_magnitude       60.000     60.000      74.000        554.000   \n","HpHp_L0.1_radius           0.000      0.000       0.000          0.000   \n","HpHp_L0.1_covariance -131297.530      0.000       0.000          0.000   \n","HpHp_L0.1_pcc             -1.586      0.000       0.000          0.000   \n","label                      0.000      0.000       0.000          0.000   \n","\n","                                        max  \n","Unnamed: 0                      7062075.000  \n","MI_dir_L0.1_weight                 8946.997  \n","MI_dir_L0.1_mean                   1401.994  \n","MI_dir_L0.1_variance             452001.092  \n","H_L0.1_weight                      8946.997  \n","H_L0.1_mean                        1401.994  \n","H_L0.1_variance                  452001.092  \n","HH_L0.1_weight                     7944.987  \n","HH_L0.1_mean                       1470.000  \n","HH_L0.1_std                         678.458  \n","HH_L0.1_magnitude                  1470.000  \n","HH_L0.1_radius                   541081.689  \n","HH_L0.1_covariance               406798.314  \n","HH_L0.1_pcc                           2.657  \n","HH_jit_L0.1_weight                 7944.987  \n","HH_jit_L0.1_mean             1534252756.000  \n","HH_jit_L0.1_variance 588000000000000000.000  \n","HpHp_L0.1_weight                   4594.455  \n","HpHp_L0.1_mean                     1470.000  \n","HpHp_L0.1_std                       686.370  \n","HpHp_L0.1_magnitude                1470.000  \n","HpHp_L0.1_radius                 501429.704  \n","HpHp_L0.1_covariance             140609.414  \n","HpHp_L0.1_pcc                         2.761  \n","label                                 1.000  "],"text/html":["\n","  <div id=\"df-0e11361f-a33d-473b-8f37-cce877f2cf05\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>mean</th>\n","      <th>std</th>\n","      <th>min</th>\n","      <th>25%</th>\n","      <th>50%</th>\n","      <th>75%</th>\n","      <th>max</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Unnamed: 0</th>\n","      <td>2426574.000</td>\n","      <td>2697342.466</td>\n","      <td>2438426.006</td>\n","      <td>0.000</td>\n","      <td>670135.250</td>\n","      <td>1579600.500</td>\n","      <td>3744351.750</td>\n","      <td>7062075.000</td>\n","    </tr>\n","    <tr>\n","      <th>MI_dir_L0.1_weight</th>\n","      <td>2426574.000</td>\n","      <td>3610.199</td>\n","      <td>2699.672</td>\n","      <td>1.000</td>\n","      <td>23.533</td>\n","      <td>3865.927</td>\n","      <td>6339.465</td>\n","      <td>8946.997</td>\n","    </tr>\n","    <tr>\n","      <th>MI_dir_L0.1_mean</th>\n","      <td>2426574.000</td>\n","      <td>217.614</td>\n","      <td>155.209</td>\n","      <td>60.000</td>\n","      <td>69.400</td>\n","      <td>134.912</td>\n","      <td>382.155</td>\n","      <td>1401.994</td>\n","    </tr>\n","    <tr>\n","      <th>MI_dir_L0.1_variance</th>\n","      <td>2426574.000</td>\n","      <td>26445.640</td>\n","      <td>28263.440</td>\n","      <td>0.000</td>\n","      <td>42.937</td>\n","      <td>11168.076</td>\n","      <td>55204.528</td>\n","      <td>452001.092</td>\n","    </tr>\n","    <tr>\n","      <th>H_L0.1_weight</th>\n","      <td>2426574.000</td>\n","      <td>3610.199</td>\n","      <td>2699.672</td>\n","      <td>1.000</td>\n","      <td>23.533</td>\n","      <td>3865.927</td>\n","      <td>6339.465</td>\n","      <td>8946.997</td>\n","    </tr>\n","    <tr>\n","      <th>H_L0.1_mean</th>\n","      <td>2426574.000</td>\n","      <td>217.614</td>\n","      <td>155.209</td>\n","      <td>60.000</td>\n","      <td>69.400</td>\n","      <td>134.912</td>\n","      <td>382.155</td>\n","      <td>1401.994</td>\n","    </tr>\n","    <tr>\n","      <th>H_L0.1_variance</th>\n","      <td>2426574.000</td>\n","      <td>26445.689</td>\n","      <td>28263.404</td>\n","      <td>0.000</td>\n","      <td>42.939</td>\n","      <td>11169.045</td>\n","      <td>55204.528</td>\n","      <td>452001.092</td>\n","    </tr>\n","    <tr>\n","      <th>HH_L0.1_weight</th>\n","      <td>2426574.000</td>\n","      <td>1676.056</td>\n","      <td>2195.495</td>\n","      <td>1.000</td>\n","      <td>1.000</td>\n","      <td>3.503</td>\n","      <td>4128.297</td>\n","      <td>7944.987</td>\n","    </tr>\n","    <tr>\n","      <th>HH_L0.1_mean</th>\n","      <td>2426574.000</td>\n","      <td>217.056</td>\n","      <td>221.819</td>\n","      <td>60.000</td>\n","      <td>60.000</td>\n","      <td>73.998</td>\n","      <td>553.833</td>\n","      <td>1470.000</td>\n","    </tr>\n","    <tr>\n","      <th>HH_L0.1_std</th>\n","      <td>2426574.000</td>\n","      <td>9.480</td>\n","      <td>35.224</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.168</td>\n","      <td>6.785</td>\n","      <td>678.458</td>\n","    </tr>\n","    <tr>\n","      <th>HH_L0.1_magnitude</th>\n","      <td>2426574.000</td>\n","      <td>230.287</td>\n","      <td>222.276</td>\n","      <td>60.000</td>\n","      <td>60.000</td>\n","      <td>95.263</td>\n","      <td>553.839</td>\n","      <td>1470.000</td>\n","    </tr>\n","    <tr>\n","      <th>HH_L0.1_radius</th>\n","      <td>2426574.000</td>\n","      <td>3894.844</td>\n","      <td>27784.932</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.029</td>\n","      <td>52.172</td>\n","      <td>541081.689</td>\n","    </tr>\n","    <tr>\n","      <th>HH_L0.1_covariance</th>\n","      <td>2426574.000</td>\n","      <td>-246.249</td>\n","      <td>3394.036</td>\n","      <td>-259668.192</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>406798.314</td>\n","    </tr>\n","    <tr>\n","      <th>HH_L0.1_pcc</th>\n","      <td>2426574.000</td>\n","      <td>0.006</td>\n","      <td>0.095</td>\n","      <td>-1.586</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>2.657</td>\n","    </tr>\n","    <tr>\n","      <th>HH_jit_L0.1_weight</th>\n","      <td>2426574.000</td>\n","      <td>1676.056</td>\n","      <td>2195.495</td>\n","      <td>1.000</td>\n","      <td>1.000</td>\n","      <td>3.503</td>\n","      <td>4128.297</td>\n","      <td>7944.987</td>\n","    </tr>\n","    <tr>\n","      <th>HH_jit_L0.1_mean</th>\n","      <td>2426574.000</td>\n","      <td>555423021.895</td>\n","      <td>724253684.091</td>\n","      <td>0.002</td>\n","      <td>2.574</td>\n","      <td>818.690</td>\n","      <td>1507653375.226</td>\n","      <td>1534252756.000</td>\n","    </tr>\n","    <tr>\n","      <th>HH_jit_L0.1_variance</th>\n","      <td>2426574.000</td>\n","      <td>4170853015257080.000</td>\n","      <td>44450991890045104.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>16.044</td>\n","      <td>2382293328.119</td>\n","      <td>588000000000000000.000</td>\n","    </tr>\n","    <tr>\n","      <th>HpHp_L0.1_weight</th>\n","      <td>2426574.000</td>\n","      <td>162.746</td>\n","      <td>691.490</td>\n","      <td>1.000</td>\n","      <td>1.000</td>\n","      <td>1.000</td>\n","      <td>1.049</td>\n","      <td>4594.455</td>\n","    </tr>\n","    <tr>\n","      <th>HpHp_L0.1_mean</th>\n","      <td>2426574.000</td>\n","      <td>217.025</td>\n","      <td>222.323</td>\n","      <td>60.000</td>\n","      <td>60.000</td>\n","      <td>74.000</td>\n","      <td>554.000</td>\n","      <td>1470.000</td>\n","    </tr>\n","    <tr>\n","      <th>HpHp_L0.1_std</th>\n","      <td>2426574.000</td>\n","      <td>5.033</td>\n","      <td>32.153</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>686.370</td>\n","    </tr>\n","    <tr>\n","      <th>HpHp_L0.1_magnitude</th>\n","      <td>2426574.000</td>\n","      <td>227.634</td>\n","      <td>223.781</td>\n","      <td>60.000</td>\n","      <td>60.000</td>\n","      <td>74.000</td>\n","      <td>554.000</td>\n","      <td>1470.000</td>\n","    </tr>\n","    <tr>\n","      <th>HpHp_L0.1_radius</th>\n","      <td>2426574.000</td>\n","      <td>2282.595</td>\n","      <td>22796.590</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>501429.704</td>\n","    </tr>\n","    <tr>\n","      <th>HpHp_L0.1_covariance</th>\n","      <td>2426574.000</td>\n","      <td>229.104</td>\n","      <td>3097.686</td>\n","      <td>-131297.530</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>140609.414</td>\n","    </tr>\n","    <tr>\n","      <th>HpHp_L0.1_pcc</th>\n","      <td>2426574.000</td>\n","      <td>0.004</td>\n","      <td>0.078</td>\n","      <td>-1.586</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>2.761</td>\n","    </tr>\n","    <tr>\n","      <th>label</th>\n","      <td>2426574.000</td>\n","      <td>0.212</td>\n","      <td>0.408</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>1.000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0e11361f-a33d-473b-8f37-cce877f2cf05')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0e11361f-a33d-473b-8f37-cce877f2cf05 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0e11361f-a33d-473b-8f37-cce877f2cf05');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-12dfb921-dec8-4249-ab9b-6de533b73355\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-12dfb921-dec8-4249-ab9b-6de533b73355')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-12dfb921-dec8-4249-ab9b-6de533b73355 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 25,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 2426574.0,\n        \"max\": 2426574.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2426574.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 834170598399827.6,\n        \"min\": -246.24909627214052,\n        \"max\": 4170853015257080.0,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          217.0561025245628\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8890198371952209.0,\n        \"min\": 0.07820544196279403,\n        \"max\": 4.44509918900451e+16,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          221.81850154252166\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 57214.427457192665,\n        \"min\": -259668.1923,\n        \"max\": 60.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 134022.74177613336,\n        \"min\": 0.0,\n        \"max\": 670135.25,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 315673.3657813746,\n        \"min\": 0.0,\n        \"max\": 1579600.5,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          0.029499710658910702\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 553092787.7711715,\n        \"min\": 0.0,\n        \"max\": 2382293328.119085,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          3744351.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1759999998713451e+17,\n        \"min\": 1.0,\n        \"max\": 5.88e+17,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          7062075.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["print(df.duplicated().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0Q-d-nhA80MZ","executionInfo":{"status":"ok","timestamp":1742840315040,"user_tz":180,"elapsed":5880,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"f11f5811-e9c3-49b3-d49f-a8b4d84062f0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n"]}]},{"cell_type":"code","source":["#remove duplicates without first occurrence\n","df.drop_duplicates(keep='first',inplace=True)"],"metadata":{"id":"OsFdQpri83JL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["nan_count = df.isna().any(axis=1).sum()\n","print(f\"Número de linhas com pelo menos um NaN: {nan_count}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"74VU9W9e86PG","executionInfo":{"status":"ok","timestamp":1742840321140,"user_tz":180,"elapsed":65,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"22b3132c-f332-4d12-e8ad-bea3e16e9ae9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Número de linhas com pelo menos um NaN: 0\n"]}]},{"cell_type":"code","source":["df = df.dropna(axis=0, how='any')"],"metadata":{"id":"y7GJs_Er873x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = df.loc[:, df.nunique() > 1]"],"metadata":{"id":"2K9z13Ss8803"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(df.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_WNkwLDJ8-0m","executionInfo":{"status":"ok","timestamp":1742840327245,"user_tz":180,"elapsed":58,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"d54fee89-d591-4695-f97e-ce1e2e015141"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["25"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["df.columns = df.columns.str.strip()  # Remove extra spaces\n","df.columns = df.columns.str.lower()\n","print(df.columns.tolist())  # Check the exact column name"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LBoqFrDN9B8t","executionInfo":{"status":"ok","timestamp":1742840327246,"user_tz":180,"elapsed":5,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"5d73b087-e094-412b-ae5b-35e5ad2053c4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['unnamed: 0', 'mi_dir_l0.1_weight', 'mi_dir_l0.1_mean', 'mi_dir_l0.1_variance', 'h_l0.1_weight', 'h_l0.1_mean', 'h_l0.1_variance', 'hh_l0.1_weight', 'hh_l0.1_mean', 'hh_l0.1_std', 'hh_l0.1_magnitude', 'hh_l0.1_radius', 'hh_l0.1_covariance', 'hh_l0.1_pcc', 'hh_jit_l0.1_weight', 'hh_jit_l0.1_mean', 'hh_jit_l0.1_variance', 'hphp_l0.1_weight', 'hphp_l0.1_mean', 'hphp_l0.1_std', 'hphp_l0.1_magnitude', 'hphp_l0.1_radius', 'hphp_l0.1_covariance', 'hphp_l0.1_pcc', 'label']\n"]}]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":273},"id":"RELBdigzj2nP","executionInfo":{"status":"ok","timestamp":1742826614791,"user_tz":180,"elapsed":58,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"b4585728-8b20-47cb-da84-67033da26df8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   unnamed: 0  mi_dir_l0.1_weight  mi_dir_l0.1_mean  mi_dir_l0.1_variance  \\\n","0           0               1.000            98.000                 0.000   \n","1           1               1.932            98.000                 0.000   \n","2           2               2.904            86.982               231.182   \n","3           3               3.903            83.655               204.061   \n","4           4               4.903            81.686               177.575   \n","\n","   h_l0.1_weight  h_l0.1_mean  h_l0.1_variance  hh_l0.1_weight  hh_l0.1_mean  \\\n","0          1.000       98.000            0.000           1.000        98.000   \n","1          1.932       98.000            0.000           1.932        98.000   \n","2          2.904       86.982          231.182           1.000        66.000   \n","3          3.903       83.655          204.061           1.000        74.000   \n","4          4.903       81.686          177.575           2.000        74.000   \n","\n","   hh_l0.1_std  ...  hh_jit_l0.1_mean   hh_jit_l0.1_variance  \\\n","0        0.000  ...    1505914321.045                  0.000   \n","1        0.000  ...     726310169.417 566234422650467008.000   \n","2        0.000  ...    1505914322.272                  0.000   \n","3        0.000  ...    1505914322.281                  0.000   \n","4        0.000  ...     752957061.594 566944486512505024.000   \n","\n","   hphp_l0.1_weight  hphp_l0.1_mean  hphp_l0.1_std  hphp_l0.1_magnitude  \\\n","0             1.000          98.000          0.000               98.000   \n","1             1.932          98.000          0.000              138.593   \n","2             1.000          66.000          0.000              114.856   \n","3             1.000          74.000          0.000               74.000   \n","4             1.000          74.000          0.000               74.000   \n","\n","   hphp_l0.1_radius  hphp_l0.1_covariance  hphp_l0.1_pcc  label  \n","0             0.000                 0.000          0.000      0  \n","1             0.000                 0.000          0.000      0  \n","2             0.000                 0.000          0.000      0  \n","3             0.000                 0.000          0.000      0  \n","4             0.000                 0.000          0.000      0  \n","\n","[5 rows x 25 columns]"],"text/html":["\n","  <div id=\"df-6ace64b2-79bf-47d4-8e4e-ca40e72f2b43\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>unnamed: 0</th>\n","      <th>mi_dir_l0.1_weight</th>\n","      <th>mi_dir_l0.1_mean</th>\n","      <th>mi_dir_l0.1_variance</th>\n","      <th>h_l0.1_weight</th>\n","      <th>h_l0.1_mean</th>\n","      <th>h_l0.1_variance</th>\n","      <th>hh_l0.1_weight</th>\n","      <th>hh_l0.1_mean</th>\n","      <th>hh_l0.1_std</th>\n","      <th>...</th>\n","      <th>hh_jit_l0.1_mean</th>\n","      <th>hh_jit_l0.1_variance</th>\n","      <th>hphp_l0.1_weight</th>\n","      <th>hphp_l0.1_mean</th>\n","      <th>hphp_l0.1_std</th>\n","      <th>hphp_l0.1_magnitude</th>\n","      <th>hphp_l0.1_radius</th>\n","      <th>hphp_l0.1_covariance</th>\n","      <th>hphp_l0.1_pcc</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1.000</td>\n","      <td>98.000</td>\n","      <td>0.000</td>\n","      <td>1.000</td>\n","      <td>98.000</td>\n","      <td>0.000</td>\n","      <td>1.000</td>\n","      <td>98.000</td>\n","      <td>0.000</td>\n","      <td>...</td>\n","      <td>1505914321.045</td>\n","      <td>0.000</td>\n","      <td>1.000</td>\n","      <td>98.000</td>\n","      <td>0.000</td>\n","      <td>98.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1.932</td>\n","      <td>98.000</td>\n","      <td>0.000</td>\n","      <td>1.932</td>\n","      <td>98.000</td>\n","      <td>0.000</td>\n","      <td>1.932</td>\n","      <td>98.000</td>\n","      <td>0.000</td>\n","      <td>...</td>\n","      <td>726310169.417</td>\n","      <td>566234422650467008.000</td>\n","      <td>1.932</td>\n","      <td>98.000</td>\n","      <td>0.000</td>\n","      <td>138.593</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2.904</td>\n","      <td>86.982</td>\n","      <td>231.182</td>\n","      <td>2.904</td>\n","      <td>86.982</td>\n","      <td>231.182</td>\n","      <td>1.000</td>\n","      <td>66.000</td>\n","      <td>0.000</td>\n","      <td>...</td>\n","      <td>1505914322.272</td>\n","      <td>0.000</td>\n","      <td>1.000</td>\n","      <td>66.000</td>\n","      <td>0.000</td>\n","      <td>114.856</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>3.903</td>\n","      <td>83.655</td>\n","      <td>204.061</td>\n","      <td>3.903</td>\n","      <td>83.655</td>\n","      <td>204.061</td>\n","      <td>1.000</td>\n","      <td>74.000</td>\n","      <td>0.000</td>\n","      <td>...</td>\n","      <td>1505914322.281</td>\n","      <td>0.000</td>\n","      <td>1.000</td>\n","      <td>74.000</td>\n","      <td>0.000</td>\n","      <td>74.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>4.903</td>\n","      <td>81.686</td>\n","      <td>177.575</td>\n","      <td>4.903</td>\n","      <td>81.686</td>\n","      <td>177.575</td>\n","      <td>2.000</td>\n","      <td>74.000</td>\n","      <td>0.000</td>\n","      <td>...</td>\n","      <td>752957061.594</td>\n","      <td>566944486512505024.000</td>\n","      <td>1.000</td>\n","      <td>74.000</td>\n","      <td>0.000</td>\n","      <td>74.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0.000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 25 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6ace64b2-79bf-47d4-8e4e-ca40e72f2b43')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6ace64b2-79bf-47d4-8e4e-ca40e72f2b43 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6ace64b2-79bf-47d4-8e4e-ca40e72f2b43');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-79543f3d-e9df-4d41-8032-aa9043a909ec\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-79543f3d-e9df-4d41-8032-aa9043a909ec')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-79543f3d-e9df-4d41-8032-aa9043a909ec button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["df_label_count = df.groupby('label').size().reset_index(name='count')\n","df_label_count.columns = ['label', 'count']"],"metadata":{"id":"QWhhKG1X9q3a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ax = sns.barplot(\n","    data = df_label_count,\n","    x= 'label',\n","    y= 'count',\n","    hue= 'label',\n","    edgecolor='black')\n","\n","ax.set_title('Distribuição das classes entre dados Anômalos e Normais',\n","          fontdict={'fontsize':18})\n","\n","for container in ax.containers:\n","   ax.bar_label(container)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":725},"id":"518MZT1Y9v2m","executionInfo":{"status":"ok","timestamp":1742840327595,"user_tz":180,"elapsed":318,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"71451dd3-7d39-447b-d911-0c9acedaf72e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["count_val0 = df_label_count[df_label_count['label'] == 0]['count'].iloc[0]\n","count_val1 = df_label_count[df_label_count['label'] == 1]['count'].iloc[0]\n","\n","print(f'Proporção de Classes:\\n')\n","print(f'Instâncias normais: {count_val0/len(df)*100:.2f}%')\n","print(f'Instâncias anômalas: {count_val1/len(df)*100:.2f}%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bIEIqyCJkC1O","executionInfo":{"status":"ok","timestamp":1742840340229,"user_tz":180,"elapsed":13,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"f9fc0980-8835-4293-a861-874a8463d600"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Proporção de Classes:\n","\n","Instâncias normais: 78.84%\n","Instâncias anômalas: 21.16%\n"]}]},{"cell_type":"markdown","source":["# SMOTE - Oversampling"],"metadata":{"id":"KPpKWyFQpx20"}},{"cell_type":"code","source":["# # check data imbalance\n","# attackcat_counts = df['label'].value_counts()\n","# attackcat_counts\n","\n","# from imblearn.over_sampling import SMOTE\n","\n","# # Separate features and target variable\n","# X = df.drop([\"label\", \"unnamed: 0\"], axis=1)\n","# y = df['label']\n","\n","# # Initialize SMOTE\n","# smote = SMOTE(random_state=42)\n","\n","# # Perform oversampling\n","# X_resampled, y_resampled = smote.fit_resample(X, y)\n","\n","# # Create a new DataFrame with oversampled data\n","# smoted_df = pd.concat([pd.DataFrame(X_resampled, columns=X.columns), pd.Series(y_resampled, name='label')], axis=1)\n","\n","# # check data imbalance again\n","# attackcat_counts = smoted_df['label'].value_counts()\n","# attackcat_counts"],"metadata":{"id":"bULuczs9pHLK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # check data imbalance\n","attackcat_counts = df['label'].value_counts()\n","attackcat_counts\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"AMSygjg57Mq6","executionInfo":{"status":"ok","timestamp":1742840346796,"user_tz":180,"elapsed":8,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"75e992be-3913-4b14-8435-6c778cf79fd4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["label\n","0    1913077\n","1     513497\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1913077</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>513497</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["from imblearn.over_sampling import SMOTE\n","\n","# Separate features and target variable\n","X = df.drop([\"label\", \"unnamed: 0\"], axis=1)\n","y = df['label']"],"metadata":{"id":"5JyLgeAS7RoJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Initialize SMOTE\n","smote = SMOTE(random_state=42)"],"metadata":{"id":"0-xhlEHY7bEa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Perform oversampling\n","X_resampled, y_resampled = smote.fit_resample(X, y)"],"metadata":{"id":"OWlMuOwm7fBr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Create a new DataFrame with oversampled data\n","smoted_df = pd.concat([pd.DataFrame(X_resampled, columns=X.columns), pd.Series(y_resampled, name='label')], axis=1)"],"metadata":{"id":"Y7v0CFdx7iKc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # check data imbalance again\n","attackcat_counts = smoted_df['label'].value_counts()\n","attackcat_counts"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"QjUbaCZH7mg-","executionInfo":{"status":"ok","timestamp":1742832916084,"user_tz":180,"elapsed":34,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"4b3c7240-3add-4371-a27b-a67df512c0a8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["label\n","0    1913077\n","1    1913077\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1913077</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1913077</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["smoted_df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Csh1WKsi8E5D","executionInfo":{"status":"ok","timestamp":1742832952957,"user_tz":180,"elapsed":40,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"16538e1e-7c1e-4ba2-998a-94df7395494d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 3826154 entries, 0 to 3826153\n","Data columns (total 14 columns):\n"," #   Column                Dtype  \n","---  ------                -----  \n"," 0   mi_dir_l0.1_weight    float32\n"," 1   mi_dir_l0.1_mean      float32\n"," 2   hh_l0.1_weight        float32\n"," 3   hh_l0.1_mean          float32\n"," 4   hh_l0.1_std           float32\n"," 5   hh_l0.1_covariance    float32\n"," 6   hh_l0.1_pcc           float32\n"," 7   hh_jit_l0.1_mean      float32\n"," 8   hh_jit_l0.1_variance  float32\n"," 9   hphp_l0.1_weight      float32\n"," 10  hphp_l0.1_radius      float32\n"," 11  hphp_l0.1_covariance  float32\n"," 12  hphp_l0.1_pcc         float32\n"," 13  label                 int8   \n","dtypes: float32(13), int8(1)\n","memory usage: 193.4 MB\n"]}]},{"cell_type":"code","source":["smoted_df['label']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"id":"FuTnKkOd_Ran","executionInfo":{"status":"ok","timestamp":1742833944570,"user_tz":180,"elapsed":28,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"1a8df393-9e31-43f6-eb79-bb5f27d3d1ea"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0          0\n","1          0\n","2          0\n","3          0\n","4          0\n","          ..\n","3826149    1\n","3826150    1\n","3826151    1\n","3826152    1\n","3826153    1\n","Name: label, Length: 3826154, dtype: int8"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3826149</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3826150</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3826151</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3826152</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3826153</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3826154 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> int8</label>"]},"metadata":{},"execution_count":48}]},{"cell_type":"markdown","source":["#Reducao do tamanho do dataset em termos de MP"],"metadata":{"id":"tdBIQxT9kJou"}},{"cell_type":"code","source":["from pandas.api.types import is_datetime64_any_dtype as is_datetime\n","from pandas.api.types import is_categorical_dtype\n","\n","def reduce_mem_usage(df, use_float16=False):\n","    \"\"\" iterate through all the columns of a dataframe and modify the data type\n","        to reduce memory usage.\n","    \"\"\"\n","    start_mem = df.memory_usage().sum() / 1024**2\n","    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n","\n","    for col in df.columns:\n","        if is_datetime(df[col]) or is_categorical_dtype(df[col]):\n","            # skip datetime type or categorical type\n","            continue\n","        col_type = df[col].dtype\n","\n","        if col_type != object:\n","            c_min = df[col].min()\n","            c_max = df[col].max()\n","            if str(col_type)[:3] == 'int':\n","                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n","                    df[col] = df[col].astype(np.int8)\n","                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n","                    df[col] = df[col].astype(np.int16)\n","                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n","                    df[col] = df[col].astype(np.int32)\n","                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n","                    df[col] = df[col].astype(np.int64)\n","            else:\n","                if use_float16 and c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","                    df[col] = df[col].astype(np.float16)\n","                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n","                    df[col] = df[col].astype(np.float32)\n","                else:\n","                    df[col] = df[col].astype(np.float64)\n","        else:\n","            df[col] = df[col].astype('object')\n","\n","    end_mem = df.memory_usage().sum() / 1024**2\n","    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n","    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) / start_mem))\n","\n","    return df"],"metadata":{"id":"LFCF4TKZkG3z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = reduce_mem_usage(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OcttZSSlkNv5","executionInfo":{"status":"ok","timestamp":1742826696964,"user_tz":180,"elapsed":497,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"5f08ac44-3d1b-49f3-b436-d1a33cbf3c33"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Memory usage of dataframe is 462.83 MB\n","Memory usage after optimization is: 224.47 MB\n","Decreased by 51.5%\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"o0yeupbihuLK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Checking for Highly Correlated Feature"],"metadata":{"id":"e9pRMQ_WkUlT"}},{"cell_type":"code","source":["df_corr = df"],"metadata":{"id":"fZpOv9pTkPqB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Calculate the correlation matrix\n","corr_matrix = df_corr.corr()\n","\n","# Create a mask to identify the features with a correlation coefficient greater than or equal to 0.75\n","high_correlation_mask = corr_matrix >= 0.75\n","\n","# Identify and list the highly correlated features\n","highly_correlated_features = []\n","\n","for feature in high_correlation_mask.columns:\n","    correlated_with = high_correlation_mask.index[high_correlation_mask[feature]].tolist()\n","    for correlated_feature in correlated_with:\n","        if feature != correlated_feature and (correlated_feature, feature) not in highly_correlated_features:\n","            highly_correlated_features.append((feature, correlated_feature))\n","\n","# Print the highly correlated features\n","print(\"Highly correlated features:\")\n","for feature1, feature2 in highly_correlated_features:\n","    print(f\"{feature1} and {feature2}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AKtxjZ1CkXvf","executionInfo":{"status":"ok","timestamp":1742840372977,"user_tz":180,"elapsed":5030,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"8d7d45f8-903c-494d-9949-1bc05b6a480a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Highly correlated features:\n","unnamed: 0 and label\n","mi_dir_l0.1_weight and h_l0.1_weight\n","mi_dir_l0.1_mean and mi_dir_l0.1_variance\n","mi_dir_l0.1_mean and h_l0.1_mean\n","mi_dir_l0.1_mean and h_l0.1_variance\n","mi_dir_l0.1_variance and h_l0.1_mean\n","mi_dir_l0.1_variance and h_l0.1_variance\n","h_l0.1_mean and h_l0.1_variance\n","hh_l0.1_weight and hh_jit_l0.1_weight\n","hh_l0.1_mean and hh_l0.1_magnitude\n","hh_l0.1_mean and hphp_l0.1_mean\n","hh_l0.1_mean and hphp_l0.1_magnitude\n","hh_l0.1_std and hh_l0.1_radius\n","hh_l0.1_std and hphp_l0.1_std\n","hh_l0.1_magnitude and hphp_l0.1_mean\n","hh_l0.1_magnitude and hphp_l0.1_magnitude\n","hh_l0.1_radius and hphp_l0.1_radius\n","hphp_l0.1_mean and hphp_l0.1_magnitude\n"]}]},{"cell_type":"markdown","source":["#Dropping High correlated"],"metadata":{"id":"wAJBowXnkboM"}},{"cell_type":"code","source":["# Create a set of features to drop\n","features_to_drop = set()\n","\n","# Iterate over the highly correlated features and add one of each pair to the drop list\n","for feature1, feature2 in highly_correlated_features:\n","    if feature1 not in features_to_drop and feature2 not in features_to_drop:\n","        features_to_drop.add(feature2)  # You can choose feature1 or feature2 to drop"],"metadata":{"id":"IgSPlpwlkdMo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["features_to_drop"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ihJD6uhmkgFO","executionInfo":{"status":"ok","timestamp":1742840381150,"user_tz":180,"elapsed":11,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"bdfd71a9-c388-417f-c7ea-7f196faa2c80"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'h_l0.1_mean',\n"," 'h_l0.1_variance',\n"," 'h_l0.1_weight',\n"," 'hh_jit_l0.1_weight',\n"," 'hh_l0.1_magnitude',\n"," 'hh_l0.1_radius',\n"," 'hphp_l0.1_magnitude',\n"," 'hphp_l0.1_mean',\n"," 'hphp_l0.1_std',\n"," 'label',\n"," 'mi_dir_l0.1_variance'}"]},"metadata":{},"execution_count":79}]},{"cell_type":"code","source":["features_to_drop = ['h_l0.1_mean',\n"," 'h_l0.1_variance',\n"," 'h_l0.1_weight',\n"," 'hh_jit_l0.1_weight',\n"," 'hh_l0.1_magnitude',\n"," 'hh_l0.1_radius',\n"," 'hphp_l0.1_magnitude',\n"," 'hphp_l0.1_mean',\n"," 'hphp_l0.1_std',\n"," 'mi_dir_l0.1_variance',\n"," 'unnamed: 0']"],"metadata":{"id":"4qp4J_FrknQQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Drop the features from the DataFrame\n","df= df.drop(columns=features_to_drop)\n","\n","# Print the remaining features\n","print(\"Remaining features after dropping highly correlated ones:\")\n","print(df.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EbS1YTxuktTN","executionInfo":{"status":"ok","timestamp":1742840444869,"user_tz":180,"elapsed":109,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"34ed774c-5777-4cc2-e11c-b7032f7438db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Remaining features after dropping highly correlated ones:\n","Index(['mi_dir_l0.1_weight', 'mi_dir_l0.1_mean', 'hh_l0.1_weight',\n","       'hh_l0.1_mean', 'hh_l0.1_std', 'hh_l0.1_covariance', 'hh_l0.1_pcc',\n","       'hh_jit_l0.1_mean', 'hh_jit_l0.1_variance', 'hphp_l0.1_weight',\n","       'hphp_l0.1_radius', 'hphp_l0.1_covariance', 'hphp_l0.1_pcc', 'label'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JCLr_nwLk4Cu","executionInfo":{"status":"ok","timestamp":1742826871459,"user_tz":180,"elapsed":10,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"9557d744-bd24-4783-af89-b90bf354c625"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 2426574 entries, 0 to 2426573\n","Data columns (total 15 columns):\n"," #   Column                Dtype  \n","---  ------                -----  \n"," 0   unnamed: 0            int32  \n"," 1   mi_dir_l0.1_weight    float32\n"," 2   mi_dir_l0.1_mean      float32\n"," 3   hh_l0.1_weight        float32\n"," 4   hh_l0.1_mean          float32\n"," 5   hh_l0.1_std           float32\n"," 6   hh_l0.1_covariance    float32\n"," 7   hh_l0.1_pcc           float32\n"," 8   hh_jit_l0.1_mean      float32\n"," 9   hh_jit_l0.1_variance  float32\n"," 10  hphp_l0.1_weight      float32\n"," 11  hphp_l0.1_radius      float32\n"," 12  hphp_l0.1_covariance  float32\n"," 13  hphp_l0.1_pcc         float32\n"," 14  label                 int8   \n","dtypes: float32(13), int32(1), int8(1)\n","memory usage: 131.9 MB\n"]}]},{"cell_type":"markdown","source":["# DF com as melhores features do mutual_info incluindo label - # Etapa de geracao de dataset para HDC"],"metadata":{"id":"uorm97lu6UIk"}},{"cell_type":"code","source":["# Dividir em chunks\n","chunk_size = len(df)  # Número de linhas por chunk\n","for i, chunk in enumerate(range(0, len(df), chunk_size)):\n","    df.iloc[chunk:chunk+chunk_size].to_csv(f\"/content/drive/MyDrive/Mestrado/ids_datasets/BotNeTIoT-L01/dataset_hdc/botNeTIoT-L01.csv\", index=False)"],"metadata":{"id":"5wgTzEie6e0t"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Etapa de *Padronização*"],"metadata":{"id":"wrip8Q3wk_uv"}},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler, MinMaxScaler"],"metadata":{"id":"MwTDvUaOk6nh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = smoted_df.drop([\"label\"], axis=1)\n","y = smoted_df[\"label\"]"],"metadata":{"id":"lFSIMQHllCfU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["scale = StandardScaler()\n","# scale = MinMaxScaler()\n","scale.fit(X)\n","X_scaled = scale.transform(X)\n","X_scale_df = pd.DataFrame(X_scaled, columns=X.columns)\n","X_scale_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"6ZLbIDUclLIA","executionInfo":{"status":"ok","timestamp":1742833991321,"user_tz":180,"elapsed":935,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"b9addc36-bb53-441e-e455-17292f7b195a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         mi_dir_l0.1_weight  mi_dir_l0.1_mean  hh_l0.1_weight  hh_l0.1_mean  \\\n","0                    -0.831            -0.612          -0.554        -0.441   \n","1                    -0.830            -0.612          -0.553        -0.441   \n","2                    -0.830            -0.689          -0.554        -0.607   \n","3                    -0.830            -0.713          -0.554        -0.565   \n","4                    -0.829            -0.727          -0.553        -0.565   \n","...                     ...               ...             ...           ...   \n","3826149              -0.830             0.358          -0.554         0.024   \n","3826150              -0.830            -0.699          -0.554        -0.488   \n","3826151              -0.827            -0.784          -0.553        -0.566   \n","3826152              -0.827            -0.827          -0.550        -0.599   \n","3826153              -0.828            -0.661          -0.554        -0.421   \n","\n","         hh_l0.1_std  hh_l0.1_covariance  hh_l0.1_pcc  hh_jit_l0.1_mean  \\\n","0             -0.365               0.115       -0.099             1.812   \n","1             -0.365               0.115       -0.099             0.586   \n","2             -0.365               0.115       -0.099             1.812   \n","3             -0.365               0.115       -0.099             1.812   \n","4             -0.365               0.115       -0.099             0.628   \n","...              ...                 ...          ...               ...   \n","3826149        0.485               0.115       -0.099            -0.555   \n","3826150       -0.256               0.115       -0.243            -0.555   \n","3826151       -0.210               0.115       -0.622            -0.555   \n","3826152       -0.150               0.114       -0.477            -0.555   \n","3826153       -0.365               0.115       -0.099            -0.555   \n","\n","         hh_jit_l0.1_variance  hphp_l0.1_weight  hphp_l0.1_radius  \\\n","0                      -0.082            -0.186            -0.156   \n","1                      15.086            -0.184            -0.156   \n","2                      -0.082            -0.186            -0.156   \n","3                      -0.082            -0.186            -0.156   \n","4                      15.105            -0.186            -0.156   \n","...                       ...               ...               ...   \n","3826149                -0.082            -0.185            -0.100   \n","3826150                -0.082            -0.186            -0.155   \n","3826151                -0.082            -0.184            -0.154   \n","3826152                -0.082            -0.183            -0.150   \n","3826153                -0.082            -0.186            -0.156   \n","\n","         hphp_l0.1_covariance  hphp_l0.1_pcc  \n","0                      -0.116         -0.082  \n","1                      -0.116         -0.082  \n","2                      -0.116         -0.082  \n","3                      -0.116         -0.082  \n","4                      -0.116         -0.082  \n","...                       ...            ...  \n","3826149                -0.116         -0.082  \n","3826150                -0.116         -0.257  \n","3826151                -0.117         -1.105  \n","3826152                -0.116         -0.112  \n","3826153                -0.116         -0.082  \n","\n","[3826154 rows x 13 columns]"],"text/html":["\n","  <div id=\"df-2155b8bc-9942-458d-8061-01edb12bb47c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mi_dir_l0.1_weight</th>\n","      <th>mi_dir_l0.1_mean</th>\n","      <th>hh_l0.1_weight</th>\n","      <th>hh_l0.1_mean</th>\n","      <th>hh_l0.1_std</th>\n","      <th>hh_l0.1_covariance</th>\n","      <th>hh_l0.1_pcc</th>\n","      <th>hh_jit_l0.1_mean</th>\n","      <th>hh_jit_l0.1_variance</th>\n","      <th>hphp_l0.1_weight</th>\n","      <th>hphp_l0.1_radius</th>\n","      <th>hphp_l0.1_covariance</th>\n","      <th>hphp_l0.1_pcc</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.831</td>\n","      <td>-0.612</td>\n","      <td>-0.554</td>\n","      <td>-0.441</td>\n","      <td>-0.365</td>\n","      <td>0.115</td>\n","      <td>-0.099</td>\n","      <td>1.812</td>\n","      <td>-0.082</td>\n","      <td>-0.186</td>\n","      <td>-0.156</td>\n","      <td>-0.116</td>\n","      <td>-0.082</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-0.830</td>\n","      <td>-0.612</td>\n","      <td>-0.553</td>\n","      <td>-0.441</td>\n","      <td>-0.365</td>\n","      <td>0.115</td>\n","      <td>-0.099</td>\n","      <td>0.586</td>\n","      <td>15.086</td>\n","      <td>-0.184</td>\n","      <td>-0.156</td>\n","      <td>-0.116</td>\n","      <td>-0.082</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-0.830</td>\n","      <td>-0.689</td>\n","      <td>-0.554</td>\n","      <td>-0.607</td>\n","      <td>-0.365</td>\n","      <td>0.115</td>\n","      <td>-0.099</td>\n","      <td>1.812</td>\n","      <td>-0.082</td>\n","      <td>-0.186</td>\n","      <td>-0.156</td>\n","      <td>-0.116</td>\n","      <td>-0.082</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-0.830</td>\n","      <td>-0.713</td>\n","      <td>-0.554</td>\n","      <td>-0.565</td>\n","      <td>-0.365</td>\n","      <td>0.115</td>\n","      <td>-0.099</td>\n","      <td>1.812</td>\n","      <td>-0.082</td>\n","      <td>-0.186</td>\n","      <td>-0.156</td>\n","      <td>-0.116</td>\n","      <td>-0.082</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.829</td>\n","      <td>-0.727</td>\n","      <td>-0.553</td>\n","      <td>-0.565</td>\n","      <td>-0.365</td>\n","      <td>0.115</td>\n","      <td>-0.099</td>\n","      <td>0.628</td>\n","      <td>15.105</td>\n","      <td>-0.186</td>\n","      <td>-0.156</td>\n","      <td>-0.116</td>\n","      <td>-0.082</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3826149</th>\n","      <td>-0.830</td>\n","      <td>0.358</td>\n","      <td>-0.554</td>\n","      <td>0.024</td>\n","      <td>0.485</td>\n","      <td>0.115</td>\n","      <td>-0.099</td>\n","      <td>-0.555</td>\n","      <td>-0.082</td>\n","      <td>-0.185</td>\n","      <td>-0.100</td>\n","      <td>-0.116</td>\n","      <td>-0.082</td>\n","    </tr>\n","    <tr>\n","      <th>3826150</th>\n","      <td>-0.830</td>\n","      <td>-0.699</td>\n","      <td>-0.554</td>\n","      <td>-0.488</td>\n","      <td>-0.256</td>\n","      <td>0.115</td>\n","      <td>-0.243</td>\n","      <td>-0.555</td>\n","      <td>-0.082</td>\n","      <td>-0.186</td>\n","      <td>-0.155</td>\n","      <td>-0.116</td>\n","      <td>-0.257</td>\n","    </tr>\n","    <tr>\n","      <th>3826151</th>\n","      <td>-0.827</td>\n","      <td>-0.784</td>\n","      <td>-0.553</td>\n","      <td>-0.566</td>\n","      <td>-0.210</td>\n","      <td>0.115</td>\n","      <td>-0.622</td>\n","      <td>-0.555</td>\n","      <td>-0.082</td>\n","      <td>-0.184</td>\n","      <td>-0.154</td>\n","      <td>-0.117</td>\n","      <td>-1.105</td>\n","    </tr>\n","    <tr>\n","      <th>3826152</th>\n","      <td>-0.827</td>\n","      <td>-0.827</td>\n","      <td>-0.550</td>\n","      <td>-0.599</td>\n","      <td>-0.150</td>\n","      <td>0.114</td>\n","      <td>-0.477</td>\n","      <td>-0.555</td>\n","      <td>-0.082</td>\n","      <td>-0.183</td>\n","      <td>-0.150</td>\n","      <td>-0.116</td>\n","      <td>-0.112</td>\n","    </tr>\n","    <tr>\n","      <th>3826153</th>\n","      <td>-0.828</td>\n","      <td>-0.661</td>\n","      <td>-0.554</td>\n","      <td>-0.421</td>\n","      <td>-0.365</td>\n","      <td>0.115</td>\n","      <td>-0.099</td>\n","      <td>-0.555</td>\n","      <td>-0.082</td>\n","      <td>-0.186</td>\n","      <td>-0.156</td>\n","      <td>-0.116</td>\n","      <td>-0.082</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3826154 rows × 13 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2155b8bc-9942-458d-8061-01edb12bb47c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2155b8bc-9942-458d-8061-01edb12bb47c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2155b8bc-9942-458d-8061-01edb12bb47c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a9b86fa0-f887-4763-b694-87b538c35f2e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a9b86fa0-f887-4763-b694-87b538c35f2e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a9b86fa0-f887-4763-b694-87b538c35f2e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_b69324ef-256a-4e5d-a191-0be7a12e5590\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_scale_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_b69324ef-256a-4e5d-a191-0be7a12e5590 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_scale_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_scale_df"}},"metadata":{},"execution_count":51}]},{"cell_type":"markdown","source":["#Train and Test Split para Classificação"],"metadata":{"id":"xTBp2TRQlRch"}},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X_scale_df, y, test_size=0.3, random_state=0)"],"metadata":{"id":"LWpdtdM4lTu_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Aplicação dos Algoritmos"],"metadata":{"id":"vNgfzDVllV0o"}},{"cell_type":"code","source":["print('--------Applying GaussianNB Classifier ----------')\n","gnb = GaussianNB()\n","gnb_fit = gnb.fit(X_train, y_train)\n","gnb_prediction = gnb.predict(X_test)\n","\n","print('--------Applying KNeighborsClassifier Classifier ----------')\n","KNN_model = KNeighborsClassifier(n_neighbors=5)\n","KNN_model.fit(X_train, y_train)\n","KNN_prediction = KNN_model.predict(X_test)\n","\n","print('--------Applying AdaBoostClassifier Classifier ----------')\n","AB = AdaBoostClassifier()\n","AB.fit(X_train, y_train)\n","AB_prediction = AB.predict(X_test)\n","\n","print('--------Applying RandomForestClassifier Classifier ----------')\n","RF = RandomForestClassifier(max_depth=10, random_state=100)\n","RF.fit(X_train, y_train)\n","RF_prediction = RF.predict(X_test)\n","\n","print('--------Applying LogisticRegression Classifier ----------')\n","LogR = LogisticRegression()\n","LogR.fit(X_train, y_train)\n","LogR_prediction = LogR.predict(X_test)\n","\n","print('--------Applying DecisionTree Classifier ----------')\n","DT = DecisionTreeClassifier(criterion = \"gini\", random_state = 100, max_depth=10, min_samples_leaf=5)\n","DT.fit(X_train, y_train)\n","DT_prediction = DT.predict(X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wuYmV4NslXOd","executionInfo":{"status":"ok","timestamp":1742836356807,"user_tz":180,"elapsed":2358221,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"a6f6ce06-0e32-4709-98d0-505df57d2cf9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--------Applying GaussianNB Classifier ----------\n","--------Applying KNeighborsClassifier Classifier ----------\n","--------Applying AdaBoostClassifier Classifier ----------\n","--------Applying RandomForestClassifier Classifier ----------\n","--------Applying LogisticRegression Classifier ----------\n","--------Applying DecisionTree Classifier ----------\n"]}]},{"cell_type":"code","source":["print('-------Performance Evaluation----------')\n","#precision_score, recall_score, f1_score, accuracy_score\n","results = []\n","selector = 'LR'\n","results.append((selector,'','', '',''))\n","results.append(('Classifier','Accurary','Precision', 'Recall','F1-Score'))\n","results.append(('NB ', accuracy_score(y_test,  gnb_prediction)*100,\n","                precision_score(y_test,  gnb_prediction)*100,\n","                recall_score(y_test,  gnb_prediction)*100,\n","                f1_score(y_test,  gnb_prediction)*100))\n","results.append(('KNN ', accuracy_score(y_test, KNN_prediction)*100,\n","                precision_score(y_test, KNN_prediction)*100,\n","                recall_score(y_test, KNN_prediction)*100,\n","                f1_score(y_test, KNN_prediction)*100))\n","results.append(('RF ', accuracy_score(y_test,  RF_prediction)*100,\n","                precision_score(y_test,  RF_prediction)*100,\n","                recall_score(y_test,  RF_prediction)*100,\n","                f1_score(y_test,  RF_prediction)*100))\n","results.append(('AB ', accuracy_score(y_test,  AB_prediction)*100,\n","                precision_score(y_test,  AB_prediction)*100,\n","                recall_score(y_test,  AB_prediction)*100,\n","                f1_score(y_test,  AB_prediction)*100))\n","results.append(('LogR ', accuracy_score(y_test,  LogR_prediction)*100,\n","                precision_score(y_test,  LogR_prediction)*100,\n","                recall_score(y_test,  LogR_prediction)*100,\n","                f1_score(y_test,  LogR_prediction)*100))\n","results.append(('DT ', accuracy_score(y_test,  DT_prediction)*100,\n","                precision_score(y_test,  DT_prediction)*100,\n","                recall_score(y_test,  DT_prediction)*100,\n","                f1_score(y_test,  DT_prediction)*100))\n","\n","print('type(results): ', type(results))\n","print('results: ', results)\n","df_results = pd.DataFrame(results)\n","print('type(df_results): ', type(df_results))\n","print('df_results: ', df_results)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nyy9hdiMlal6","executionInfo":{"status":"ok","timestamp":1742836384913,"user_tz":180,"elapsed":5680,"user":{"displayName":"Augusto Santos","userId":"04892431222760189871"}},"outputId":"1eb87146-551e-4bc6-c9b8-4a61fc42a074"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-------Performance Evaluation----------\n","type(results):  <class 'list'>\n","results:  [('LR', '', '', '', ''), ('Classifier', 'Accurary', 'Precision', 'Recall', 'F1-Score'), ('NB ', 96.426091630679, 99.95263156909331, 92.9049750447246, 96.30003093604536), ('KNN ', 99.98867444877236, 99.98277350112059, 99.99460520545466, 99.98868900327497), ('RF ', 99.99459858326067, 99.98921157493605, 100.0, 99.99460549647704), ('AB ', 99.98283743390888, 99.98364133451905, 99.98207536005903, 99.9828583411573), ('LogR ', 99.91836891153612, 99.9573305281784, 99.87957426369756, 99.91843726851025), ('DT ', 99.99555689913377, 99.99303932606755, 99.99808571806456, 99.99556245839804)]\n","type(df_results):  <class 'pandas.core.frame.DataFrame'>\n","df_results:              0         1          2       3         4\n","0          LR                                       \n","1  Classifier  Accurary  Precision  Recall  F1-Score\n","2         NB     96.426     99.953  92.905    96.300\n","3        KNN     99.989     99.983  99.995    99.989\n","4         RF     99.995     99.989 100.000    99.995\n","5         AB     99.983     99.984  99.982    99.983\n","6       LogR     99.918     99.957  99.880    99.918\n","7         DT     99.996     99.993  99.998    99.996\n"]}]}]}